"""
QBO Integration Configuration

Centralized configuration for all QBO-related URLs, endpoints, and settings.
This ensures consistency across all QBO services and eliminates hardcoded values.
"""
import os
from enum import Enum

class QBOEnvironment(Enum):
    """QBO environment types."""
    SANDBOX = "sandbox"
    PRODUCTION = "production"
    MOCK = "mock"

class QBOConfig:
    """Centralized QBO configuration."""
    
    def __init__(self):
        self.environment = os.getenv("QBO_ENVIRONMENT", "sandbox")
        self.use_mock = os.getenv("USE_MOCK_QBO", "true").lower() == "true"
        
        # Client credentials
        self.client_id = os.getenv("QBO_CLIENT_ID", "mock_client_id")
        self.client_secret = os.getenv("QBO_CLIENT_SECRET", "mock_client_secret")
        
        # Base URLs
        self.base_url = os.getenv("BASE_URL", "http://localhost:8000")
        
        # QBO API URLs
        self.production_api_url = "https://quickbooks.api.intuit.com/v3/company"
        self.sandbox_api_url = "https://sandbox-quickbooks.api.intuit.com/v3/company"
        
        # OAuth URLs
        self.oauth_base_url = "https://oauth.platform.intuit.com/oauth2/v1"
        self.token_url = f"{self.oauth_base_url}/tokens/bearer"
        self.auth_url = f"{self.oauth_base_url}/auth"
        
        # Redirect URIs
        self.redirect_uri = os.getenv("QBO_REDIRECT_URI", f"{self.base_url}/api/v1/infrastructure/qbo-setup/callback")
        self.mock_redirect_uri = f"{self.base_url}/mock/qbo/auth"
        
        # Webhook URLs
        self.webhook_endpoint = os.getenv("QBO_WEBHOOK_ENDPOINT", f"{self.base_url}/api/v1/infrastructure/qbo-setup/webhook")
    
    @property
    def api_base_url(self) -> str:
        """Get the appropriate QBO API base URL based on environment."""
        if self.use_mock:
            return f"{self.base_url}/mock/qbo/api"
        elif self.environment == "production":
            return self.production_api_url
        else:
            return self.sandbox_api_url
    
    @property
    def auth_redirect_uri(self) -> str:
        """Get the appropriate redirect URI based on environment."""
        if self.use_mock:
            return self.mock_redirect_uri
        else:
            return self.redirect_uri
    
    @property
    def is_mock_mode(self) -> bool:
        """Check if running in mock mode."""
        return self.use_mock
    
    @property
    def is_production(self) -> bool:
        """Check if running in production mode."""
        return self.environment == "production" and not self.use_mock
    
    @property
    def is_sandbox(self) -> bool:
        """Check if running in sandbox mode."""
        return self.environment == "sandbox" and not self.use_mock
    
    def get_auth_url(self, state: str, business_id: str) -> str:
        """Generate the appropriate auth URL based on environment."""
        if self.use_mock:
            return f"{self.mock_redirect_uri}?state={state}&business_id={business_id}"
        else:
            # For real QBO, this would be generated by the Intuit SDK
            # This is just the base URL structure
            return f"{self.auth_url}?client_id={self.client_id}&redirect_uri={self.redirect_uri}&state={state}"
    
    def get_webhook_url(self, business_id: str) -> str:
        """Generate webhook URL for a business."""
        return f"{self.webhook_endpoint}/{business_id}"
    
    def to_dict(self) -> dict:
        """Convert configuration to dictionary for logging/debugging."""
        return {
            "environment": self.environment,
            "use_mock": self.use_mock,
            "api_base_url": self.api_base_url,
            "redirect_uri": self.redirect_uri,
            "webhook_endpoint": self.webhook_endpoint,
            "is_mock_mode": self.is_mock_mode,
            "is_production": self.is_production,
            "is_sandbox": self.is_sandbox
        }

# Global configuration instance
qbo_config = QBOConfig()

# Convenience functions for backward compatibility
def get_qbo_api_url() -> str:
    """Get QBO API base URL."""
    return qbo_config.api_base_url

def get_qbo_redirect_uri() -> str:
    """Get QBO redirect URI."""
    return qbo_config.redirect_uri

def get_qbo_token_url() -> str:
    """Get QBO token URL."""
    return qbo_config.token_url

def get_qbo_auth_url() -> str:
    """Get QBO auth URL."""
    return qbo_config.auth_url

def is_qbo_mock_mode() -> bool:
    """Check if QBO is in mock mode."""
    return qbo_config.is_mock_mode
